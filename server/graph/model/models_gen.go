// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type NewUser struct {
	Username string  `json:"username"`
	Email    string  `json:"email"`
	Password string  `json:"password"`
	Age      *int    `json:"age"`
	Gender   *bool   `json:"gender"`
	Phone    *string `json:"phone"`
	Address  *string `json:"address"`
}

type UpdateUser struct {
	ID       int     `json:"id"`
	Username string  `json:"username"`
	Email    string  `json:"email"`
	Password string  `json:"password"`
	Age      *int    `json:"age"`
	Gender   *bool   `json:"gender"`
	Phone    *string `json:"phone"`
	Address  *string `json:"address"`
}

type UserFilter struct {
	Limit   int     `json:"limit"`
	Offset  int     `json:"offset"`
	Search  *string `json:"search"`
	Order   *string `json:"order"`
	OrderBy *string `json:"orderBy"`
	Gender  *bool   `json:"gender"`
}

type Ordertype string

const (
	OrdertypeAsc  Ordertype = "ASC"
	OrdertypeDesc Ordertype = "DESC"
)

var AllOrdertype = []Ordertype{
	OrdertypeAsc,
	OrdertypeDesc,
}

func (e Ordertype) IsValid() bool {
	switch e {
	case OrdertypeAsc, OrdertypeDesc:
		return true
	}
	return false
}

func (e Ordertype) String() string {
	return string(e)
}

func (e *Ordertype) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Ordertype(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ORDERTYPE", str)
	}
	return nil
}

func (e Ordertype) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
